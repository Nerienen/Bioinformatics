# point mutation: affects a single nucleotide of nucleic acid
# parsimony: biological principle that nature tends to take the shortest path in evolution

# the Hamming distance between s and t, denoted dH(s,t), is the number of corresponding symbols that differ in s and t

#Given: Two DNA strings s and t
# of equal length (not exceeding 1 kbp).

#Return: The Hamming distance dH(s,t)


s = "GTTGTCGTGCCTTCTGCGGGTGCTCCGGTAACTTGTTGCGATCCCGTTGCTTAAAGCTGGAGTACAAATAGACATAAGTCTAGTGGGCGCATGTTATCATCCATGCCACAGCGCAAGACTTAGAGGCTATGCCCCGCCCAGCTCGGGGCATGCTTCAACTCGGTGATTCTCGCCTGTCCGAAACTGTAGTCGCCAGGCCTGGCCGGTCCTGTTCGCGTCTCCGGCAGCGGCGGGCCCACTATCTTTCCGCTTGGGGGGGGATACCAATCCGTATGGGTAGAGATCAAGAATTCTTCCGCTTGTTCCGGATCGCCATAACCTCTAGGGATAACGACAACAACACTGGGTTGGATCTTATTTGCCATAAAGTCGGCGCCGGACCGAAACAACAGACCAATGATGCAAGGGGCGCGCGAGGCAACACCGCAAGGATCTGGCCGTACCTTCGACTTTTGACAAAACGTACTCGGATTACCGCATCATGGTTCTCCGACCTACCGTAAAGATATATCCCGGCGCGGACCACTACGCGTGGAAGGTATGGTAAGGGGAATTCAACTCGTCGTGTGACGTGGCATCGTGTCCTGCGGGGACCGTGTGGTTGGTCTGTTGTACATCTGGTAACTTGCATTCGGTAGGTCATGAGACGCTGGATACGACGTCCCCGCATGACTAACTATAGTCAGAAGACATTAGGAGATTAAGTTGGATTATTTAAAAGCTAAGCCGCTGTAAAGGCCTAAATGTGCTCCTACGCATACCTGTCGTTCGTTGCTATCATGCGTTCTGCATCTGTAGTAATCTCGGGCCGAATGGTCAGCTGGTGTCGATTCTTGCTAATAACCTGGTTCCAGTTAGGAAACTCTTCAAGTCATCTTTCATAAAAACGGTTGAGAGCCGCAAAACCTAGCACCTCAGGATGATCGCGTATCGGTTTCTTTCGTTACACAATCGAACGATTTGCCGGCGCAGAAGCCTACCCCCT"
t = "TGATTAAAACATTCTGGGCACGCCCGGGAGATTGGCTCTCACCCCATATGTTTAACGTACAGTCCATGACTGCACAAGTGAAGTGAACTAGTGTTATCAATCTGTCAAACGCCCTATGAAAGGCGTTTATGACCCTGCCAGACAAGTTAACGCTACCGCTCGCAGATAGTTCCCGTCCTTAACCTGCGAGTGCCAAGCCGTGCTGGGCATAATCGTGTTTGGGTCATCTTCGTGCCCCCGCGCCTTTCGGTTACGACAGGGCATCCACGCGTCTTGGTACGGATGGAGAGCGATTCTGGCTGTTACAGGCCTACTAGGCGTAAAGGAATGACGACATCACTAAGGAAGTCGATGATATTTGGCATCGTTTCCGCCCTGGACCGGGACAACAGGCTTTGGTTGGAAGGGCGTCAGGTACCGCCATCTCGGGAATGGGTTATGGACACCAAAACTTAACCTGAGGTATTCGGATTCGAGGTCCCTAATTCAGCTACTCATCACATTCCACGGCCCCGTCGCGGTGTCAAACCCGTACAAGTAATAGTTCTGGTCACTCTGCTCGTCGTGAGTTCGCCTGGCCGGGCGTGCGGAGACCTTGTTGATACTCAATTGTACGAAGGTTCGCCATCGTGAAAGAGGAAGAGGGACGCTGGACTACACGTCCCCGCATTAGCTCTTATAATCAAAACCCACTGTCATGTAATCCAAGATTATTCCAAGTCCGATCCCTAGTTATAGCCCTAAAGGCGTTATAGGTCTATCGTTGGGGTGATGCAAACAATAGGTGTGCGCCACTAGGATTCTCGGGCCAAATGGCTCGATAGCATCGATAGTGGCTCGAAGTCTAGTCCCAAATCGCATCGTCTTAATACCATCTTTACTGTAATGGTAAGCGCGTGAAAATACTTATACAAGAATCATAACTGCACTACGCCTTCCACCTCTGCCCTAATGACTCTCCTGTCGTCTCCCAAGTTCACTCTCA"

# Initialize a counter
hamming_distance = 0

# Loop through both strings at the same time

# zip(s, t) pairs up corresponding characters:

#hamming distance calculation: measuring how many characters differ between two strings (or lists) of equal length.

#zip() pairs up elements from s and t position by position

#On each pass, a is one element from s and b is the corresponding element from t.
for a, b in zip(s, t):
    #Checks if the two corresponding elements differ.
    if a != b:
        hamming_distance += 1

print(hamming_distance)



