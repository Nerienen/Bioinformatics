

# For one-to-one character mappings (like A↔T and C↔G), the cleanest and safest way is using str.maketrans() with str.translate():

def transcribe(dna):
    rules = str.maketrans("ATCG", "TAGC")
    return dna.translate(rules)



# Sample input
dna_string = "AGACTCTTCTTGCGACTAGCTATACGTGGTCACGTTCCACTTCCGGGAAACAGACGACGGACGGATGTCTGCCCTGTACAACCATGGGTCCGACTCAAAATTATTATGTACTCAATAACCCCTTGCGATCATTGTGTATCACTCCTGTTGATATAGTTCTTGGAGTCGCACAAAAGCGTGGCCAAACGTTGAGGTTATTTTTATTCGATAGGTGCGGCTGACGGGGCTAGGCATGTCAGGTAGGTTTACCATTAAAACGATTTAAAGCACCGGTTAGTTAGAGGCCATGCGCCCTTCTGCACACGCCGTGGAGATCAAAGGTTTATAAGGCAGCATCTAGAGTTCTAAATCATTTGTGTGTTTGTTAAAGCACCGAGCAGCGCGCCGTGCCTAGTAGAAAATAATTTCAAACGTCATGTGCCCTAGTGACTTCCGATTCAGGGGCGCTAAAGAAAGCGGGCTTACTCACCTAGTTCTAGATGAAAGTTGCAATAGTTATAAAACTGCAGGCCAGCAAACTGGAAAGTATGCACAAAAATCCGTAGGTATTCGTCGAGAGGGCGCCCGCCATGTCCATCCGTCGCGGCACCTCATGATGTTAATACCGCAATGGCGCTTGGCAGCAGAGGTTGTTTAGTAAGTTGTCCGGATTTTACGTTAGCATCGTACTTCACTAGCATTCATAAGCACCCATTAATAATCAGCTGCATAACTTACGCAAGTTTTAACCCAGCCTGAACCATCCTTAAGTGGTCAGGGCTGGGCAGCATATCATGCTTGCTCCACCTTGACGTTATACTCGAGGAAGTAAAATATAGTCACGAGAATCCAGCGTGTACCTCCTGCCACAAGCGCCGCTCCTCCATCTCTGAATTGTGACATTATATCAACCCACGGGAACGGCAGGAACAACAAAAATATTGGGTTGGCGAAACTCTCGAAAGTTAGGGCAAATACTGTATAACATAAGGCAGTACTGGG"


# complementary strand Transcription
complementary_string = transcribe(dna_string)



# Output
print(complementary_string)

reversed_complementary_string = complementary_string[::-1]
print("Result")
print(reversed_complementary_string)